В программе реализован шаблон проектирования Стратегия т.к. используются схожие алгоритмы решающие конкретную задачу. Реализация алгоримов выносится в отдельные классы и предоставляется возможность выбираьт алгоритмы во время выполнения программы.
Шаблон дает возможность в процессе выполнения выбрать стратегию.





Чат. Написание.
Чат должен состоять из клиента и сервера.(современные чаты запускаюься одним файлом).
Для выбора между клиентом или сервером напишем ip scanner.
Для быстроты сканер сделаем многопоточным.
Проект для удобства разбит на модули, - исп. техника модульного программирования.
В главных функциях использован обьектно ориентированный принцип полиморфизма для определения типа узла.

Ip scanner состоит:
1:генератора потоков
2:планировщика потоков
3:условной функции, определяющей запускать сервер или клиент
Клиент состоит из:
1:инициализыции - функция init.
2:установки сетевого соединения - функция conn.
3:
Сервер должен состоять из : 
1:сознание сокета - функция init.
2:установки сетевого соединения - ф conn.
3:
4:
5:


План работ:
На данном этапе проэект состоит из:
1:Модуля main.cpp
2:Модуля message.cxx
3:Модуля ipscan.cxx
4:Модуля server.cxx
5:Модуля client.cxx
6:Системы сборки CMake.
7:Система контроля версий Git.

Разработан инрерфейс модуля ipscan:

Разработана с-версия ipscan:

В реализации клиента/сервера использовались техники инкапсуляции Абстрактный класс и конкретная реализация. Дело в том что на этапе компиляции не определено какой из классов клиент или сервер будет создан. Программа сама определяет какой из узлов нужен, пользавателю этого делать не надо. Достаточно запустить файл chat на исполнение и все. Для простоты реализации при проектировании клиента и сервера использавался единый  интерфейс.
