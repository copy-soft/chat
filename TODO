УДОВЛЕТВОРИТЬ ПОТРЕБНОСТЬ КЛИЕНТА В UDP СОКЕТАХ


make private protected AbsPar

-------------------------------------------------------------------------
модель чата: Абстрактный AbstractPeer класс проэцируется на конкретные Client/Serverчтобы интерпритировать коннект в терминах классов.
------------------------------------------------------------------------

Запланированный результат:  сетевой чат 

Управление изменениями: имена, изменения в рамках основной стартегии
Структуризация конечного продукта

Стратегия удовл потребностей клиента
фиксация изменений

Процесс удовлетворения заявленных и подразумеваемых потребностей заказчика и других участников

Установление направления проекта, фокусирующего все процессы на удовлетворение потребностей заказчика и охватывающего деятельность всех участников проекта. Формализация соглашений с участниками. Управление изменениями потребностей заказчика.

Выполнение проекта как набора запланированных и взаимоувязанных процессов

Выявление и документирование процессов по проекту, их владельцев, а также прав и обязанности владельцев. Структуризация конечного продукта (выделение компонентов) для целей учета всей полноты процессов его создания. Определение взаимосвязи процессов, их координация и объединение в единое целое.



*занятся описательной и файлораспределительной 
поместить политики в client.h и server.h
ThreadPool
Lifetime Constructor Destructor
https://www.geeksforgeeks.org/tcp-and-udp-server-using-select/
ipscan  return value from thread  stuff/future
run time polymorphism
Client/Server  Udp/Tcp раскрывает суть исследователь
конкретная политика абстрактная политика

Stage: Proto
*pobel
DRY  dont repeat yourself
Strategy of client and server
гост  тестирование модули

/////////////////////////////////////////////////////////////////////////////
сдклать параметры в клиент и сервер чтоб конвеер (cli 127.0.0.1 "mess text")
/////////////////////////////////////////////////////////////////////////////
сделать проверку над ошибками в Peer функции

сделать чтобы быблиотеку можно было использовать в других проектах (клиени и сервер)
peer1:client, base
peer2:server, base



покрытие условий/решений: Такое выполнение программы при тестировании, при котором каждая точка входа и выхода программы должна быть вызвана хотя бы один раз; каждое условие в решении программы должно быть выполнено со всеми возможными результатами хотя бы один раз; все результаты каждого решения должны быть выполнены хотя бы один раз.

Требования по выполнению верификации системы выходят за область применения настоящего стандарта. Однако процессы жизненного цикла ПО поддерживают процесс верификации системы и взаимодействуют с ним. Детали проектирования ПО, касающиеся функциональных возможностей системы, должны быть доступными при выполнении верификации системы. Верификация системы может обеспечивать значительное покрытие структуры кода. Для достижения критериев тестового покрытия, описанных в Плане верификации ПО, может быть использован анализ покрытия ПО тестами верификации системы.


make tests
make input custom ip

https://www.google.ru/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwiO-YT28Pn_AhXyIRAIHQ8XBBIQFnoECCoQAQ&url=https%3A%2F%2Fengenegr.ru%2Foks%2Fprogrammnoe-obespechenie&usg=AOvVaw0epQYugYi-lZaSrctdJq4_&opi=89978449



* speech
X dymnam cast write
  plan:
   inherit server for visitor
   discribe visitor
  make connect send recv funktion with polimorphism   make polimorphism by return arg non pointer i ges it works  test.cpp(37) pol.cpp  selection (pointer)


  make client objects
  make proff     if peer  funktion (cli ser)  threads on c run cli or ser
  make for(;;)
  enum of chat  255  server client  255(server) no connect   255 client no connect
  make linked list nicknames   make not node	
  
  streams
  make manipulators
  remove comunizm
  make client objects
  remove others
  ediniy podhod k klientu i serveru
  make logs
  make packet
  make cli/ser  polymprph
  make simple (funct to files)  readable
  make return statement from funct(interface)
  make out & in stream
  make funct run(auto)
  event select()
  make intereface thread
  make ping for ipscan
  make select 0 and functs() for cli end serv
  posle select sdelat` class for processing serv  messages  class message
  remove sd, sd2 from server

  Questions:
  how to make ping to ipscan and remove double accept in server?
  how to kick client (supervisor)?
  make    module :private;   and submodules    global module    module;
